{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { groq, createClient, createImageUrlBuilder, createPortableTextComponent, createPreviewSubscriptionHook } from \"next-sanity\";\nvar config = {\n  /**\n   * Find your project ID and dataset in `sanity.json` in your studio project.\n   * These are considered “public”, but you can use environment variables\n   * if you want differ between local dev and production.\n   *\n   * https://nextjs.org/docs/basic-features/environment-variables\n   **/\n  dataset: \"production\",\n  projectId: \"iuec1hub\",\n  useCdn: false\n  /**\n   * Set useCdn to `false` if your application require the freshest possible\n   * data always (potentially slightly slower and a bit more expensive).\n   * Authenticated request (like preview) will always bypass the CDN\n   **/\n\n};\n/**\n * Set up a helper function for generating Image URLs with only the asset reference data in your documents.\n * Read more: https://www.sanity.io/docs/image-url\n **/\n\nexport var urlFor = function urlFor(source) {\n  return createImageUrlBuilder(config).image(source);\n}; // Set up the live preview subsscription hook\n\nexport var usePreviewSubscription = createPreviewSubscriptionHook(config); // Set up Portable Text serialization\n\nexport var PortableText = createPortableTextComponent(_objectSpread(_objectSpread({}, config), {}, {\n  // Serializers passed to @sanity/block-content-to-react\n  // (https://github.com/sanity-io/block-content-to-react)\n  serializers: {}\n})); // Set up the client for fetching data in the getProps page functions\n\nexport var sanityClient = createClient(config); // Set up a preview client with serverless authentication for drafts\n\nexport var previewClient = createClient(_objectSpread(_objectSpread({}, config), {}, {\n  useCdn: false,\n  token: process.env.SANITY_API_TOKEN\n})); // Helper function for easily switching between normal client and preview client\n\nexport var getClient = function getClient(usePreview) {\n  return usePreview ? previewClient : sanityClient;\n};","map":{"version":3,"sources":["/Users/phil/Projects/sanity-template-nextjs-vercel-basic/utils/sanity.js"],"names":["groq","createClient","createImageUrlBuilder","createPortableTextComponent","createPreviewSubscriptionHook","config","dataset","projectId","useCdn","urlFor","source","image","usePreviewSubscription","PortableText","serializers","sanityClient","previewClient","token","process","env","SANITY_API_TOKEN","getClient","usePreview"],"mappings":";;;;;;AAAA,SACEA,IADF,EAEEC,YAFF,EAGEC,qBAHF,EAIEC,2BAJF,EAKEC,6BALF,QAMO,aANP;AAQA,IAAMC,MAAM,GAAG;AACb;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,OAAO,EAAE,YARI;AASbC,EAAAA,SAAS,EAAE,UATE;AAUbC,EAAAA,MAAM;AACN;AACF;AACA;AACA;AACA;;AAfe,CAAf;AAkBA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD;AAAA,SAAYR,qBAAqB,CAACG,MAAD,CAArB,CAA8BM,KAA9B,CAAoCD,MAApC,CAAZ;AAAA,CAAf,C,CAEP;;AACA,OAAO,IAAME,sBAAsB,GAAGR,6BAA6B,CAACC,MAAD,CAA5D,C,CAEP;;AACA,OAAO,IAAMQ,YAAY,GAAGV,2BAA2B,iCAClDE,MADkD;AAErD;AACA;AACAS,EAAAA,WAAW,EAAE;AAJwC,GAAhD,C,CAOP;;AACA,OAAO,IAAMC,YAAY,GAAGd,YAAY,CAACI,MAAD,CAAjC,C,CACP;;AACA,OAAO,IAAMW,aAAa,GAAGf,YAAY,iCACpCI,MADoC;AAEvCG,EAAAA,MAAM,EAAE,KAF+B;AAGvCS,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAHoB,GAAlC,C,CAMP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD;AAAA,SACvBA,UAAU,GAAGN,aAAH,GAAmBD,YADN;AAAA,CAAlB","sourcesContent":["import {\n  groq,\n  createClient,\n  createImageUrlBuilder,\n  createPortableTextComponent,\n  createPreviewSubscriptionHook,\n} from \"next-sanity\";\n\nconst config = {\n  /**\n   * Find your project ID and dataset in `sanity.json` in your studio project.\n   * These are considered “public”, but you can use environment variables\n   * if you want differ between local dev and production.\n   *\n   * https://nextjs.org/docs/basic-features/environment-variables\n   **/\n  dataset: \"production\",\n  projectId: \"iuec1hub\",\n  useCdn: process.env.NODE_ENV === \"production\",\n  /**\n   * Set useCdn to `false` if your application require the freshest possible\n   * data always (potentially slightly slower and a bit more expensive).\n   * Authenticated request (like preview) will always bypass the CDN\n   **/\n};\n\n/**\n * Set up a helper function for generating Image URLs with only the asset reference data in your documents.\n * Read more: https://www.sanity.io/docs/image-url\n **/\nexport const urlFor = (source) => createImageUrlBuilder(config).image(source);\n\n// Set up the live preview subsscription hook\nexport const usePreviewSubscription = createPreviewSubscriptionHook(config);\n\n// Set up Portable Text serialization\nexport const PortableText = createPortableTextComponent({\n  ...config,\n  // Serializers passed to @sanity/block-content-to-react\n  // (https://github.com/sanity-io/block-content-to-react)\n  serializers: {},\n});\n\n// Set up the client for fetching data in the getProps page functions\nexport const sanityClient = createClient(config);\n// Set up a preview client with serverless authentication for drafts\nexport const previewClient = createClient({\n  ...config,\n  useCdn: false,\n  token: process.env.SANITY_API_TOKEN,\n});\n\n// Helper function for easily switching between normal client and preview client\nexport const getClient = (usePreview) =>\n  usePreview ? previewClient : sanityClient;\n"]},"metadata":{},"sourceType":"module"}