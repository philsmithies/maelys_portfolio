{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { groq, createClient, createImageUrlBuilder, createPortableTextComponent, createPreviewSubscriptionHook } from 'next-sanity';\nconst config = {\n  /**\n    * Find your project ID and dataset in `sanity.json` in your studio project.\n    * These are considered “public”, but you can use environment variables\n    * if you want differ between local dev and production.\n    *\n    * https://nextjs.org/docs/basic-features/environment-variables\n    **/\n  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,\n  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  useCdn: false\n  /**\n    * Set useCdn to `false` if your application require the freshest possible\n    * data always (potentially slightly slower and a bit more expensive).\n    * Authenticated request (like preview) will always bypass the CDN\n    **/\n\n};\n/**\n * Set up a helper function for generating Image URLs with only the asset reference data in your documents.\n * Read more: https://www.sanity.io/docs/image-url\n **/\n\nexport const urlFor = source => createImageUrlBuilder(config).image(source); // Set up the live preview subsscription hook\n\nexport const usePreviewSubscription = createPreviewSubscriptionHook(config); // Set up Portable Text serialization\n\nexport const PortableText = createPortableTextComponent(_objectSpread(_objectSpread({}, config), {}, {\n  // Serializers passed to @sanity/block-content-to-react\n  // (https://github.com/sanity-io/block-content-to-react)\n  serializers: {}\n})); // Set up the client for fetching data in the getProps page functions\n\nexport const sanityClient = createClient(config); // Set up a preview client with serverless authentication for drafts\n\nexport const previewClient = createClient(_objectSpread(_objectSpread({}, config), {}, {\n  useCdn: false,\n  token: process.env.SANITY_API_TOKEN\n})); // Helper function for easily switching between normal client and preview client\n\nexport const getClient = usePreview => usePreview ? previewClient : sanityClient;","map":{"version":3,"sources":["/Users/phil/Projects/sanity-template-nextjs-vercel-basic/utils/sanity.js"],"names":["groq","createClient","createImageUrlBuilder","createPortableTextComponent","createPreviewSubscriptionHook","config","dataset","process","env","NEXT_PUBLIC_SANITY_DATASET","projectId","NEXT_PUBLIC_SANITY_PROJECT_ID","useCdn","urlFor","source","image","usePreviewSubscription","PortableText","serializers","sanityClient","previewClient","token","SANITY_API_TOKEN","getClient","usePreview"],"mappings":";;;;;;AAAA,SACIA,IADJ,EAEIC,YAFJ,EAGIC,qBAHJ,EAIIC,2BAJJ,EAKIC,6BALJ,QAMS,aANT;AAQE,MAAMC,MAAM,GAAG;AACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,0BARR;AASbC,EAAAA,SAAS,EAAEH,OAAO,CAACC,GAAR,CAAYG,6BATV;AAUbC,EAAAA,MAAM;AACN;AACJ;AACA;AACA;AACA;;AAfiB,CAAf;AAkBA;AACF;AACA;AACA;;AACE,OAAO,MAAMC,MAAM,GAAGC,MAAM,IAAIZ,qBAAqB,CAACG,MAAD,CAArB,CAA8BU,KAA9B,CAAoCD,MAApC,CAAzB,C,CAEP;;AACA,OAAO,MAAME,sBAAsB,GAAGZ,6BAA6B,CAACC,MAAD,CAA5D,C,CAEP;;AACA,OAAO,MAAMY,YAAY,GAAGd,2BAA2B,iCAClDE,MADkD;AAErD;AACA;AACAa,EAAAA,WAAW,EAAE;AAJwC,GAAhD,C,CAOP;;AACA,OAAO,MAAMC,YAAY,GAAGlB,YAAY,CAACI,MAAD,CAAjC,C,CACP;;AACA,OAAO,MAAMe,aAAa,GAAGnB,YAAY,iCACpCI,MADoC;AAEvCO,EAAAA,MAAM,EAAE,KAF+B;AAGvCS,EAAAA,KAAK,EAAEd,OAAO,CAACC,GAAR,CAAYc;AAHoB,GAAlC,C,CAMP;;AACA,OAAO,MAAMC,SAAS,GAAIC,UAAD,IAAiBA,UAAU,GAAGJ,aAAH,GAAmBD,YAAhE","sourcesContent":["import {\n    groq,\n    createClient,\n    createImageUrlBuilder,\n    createPortableTextComponent,\n    createPreviewSubscriptionHook,\n  } from 'next-sanity'\n  \n  const config = {\n    /**\n      * Find your project ID and dataset in `sanity.json` in your studio project.\n      * These are considered “public”, but you can use environment variables\n      * if you want differ between local dev and production.\n      *\n      * https://nextjs.org/docs/basic-features/environment-variables\n      **/\n    dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,\n    projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n    useCdn: process.env.NODE_ENV === 'production',\n    /**\n      * Set useCdn to `false` if your application require the freshest possible\n      * data always (potentially slightly slower and a bit more expensive).\n      * Authenticated request (like preview) will always bypass the CDN\n      **/\n  }\n  \n  /**\n   * Set up a helper function for generating Image URLs with only the asset reference data in your documents.\n   * Read more: https://www.sanity.io/docs/image-url\n   **/\n  export const urlFor = source => createImageUrlBuilder(config).image(source)\n  \n  // Set up the live preview subsscription hook\n  export const usePreviewSubscription = createPreviewSubscriptionHook(config)\n  \n  // Set up Portable Text serialization\n  export const PortableText = createPortableTextComponent({\n    ...config,\n    // Serializers passed to @sanity/block-content-to-react\n    // (https://github.com/sanity-io/block-content-to-react)\n    serializers: {},\n  })\n  \n  // Set up the client for fetching data in the getProps page functions\n  export const sanityClient = createClient(config)\n  // Set up a preview client with serverless authentication for drafts\n  export const previewClient = createClient({\n    ...config,\n    useCdn: false,\n    token: process.env.SANITY_API_TOKEN,\n  })\n  \n  // Helper function for easily switching between normal client and preview client\n  export const getClient = (usePreview) => (usePreview ? previewClient : sanityClient)\n  "]},"metadata":{},"sourceType":"module"}